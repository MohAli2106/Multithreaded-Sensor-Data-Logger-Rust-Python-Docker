pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'sensor-dashboard'
        CONTAINER_NAME = 'sensor-monitor'
    }

    stages {
        stage('Initialize') {
            steps {
                echo " Starting  pipeline..."
                sh 'echo "Current directory: $(pwd)"'
                sh 'ls -la'
            }
        }

        stage('Clone Repository') {
            steps {
                echo "Cloning repository..."
                git branch: 'main', url: 'https://github.com/MohAli2106/Multithreaded-Sensor-Data-Logger-Rust-Python-Docker.git'
                sh 'echo "Repository cloned successfully"'
                sh 'ls -la'
            }
        }


        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh '''
                    echo "Building with no cache..."
                    docker build --no-cache -t ${DOCKER_IMAGE_NAME} .
                    echo "Docker build completed"
                '''
            }
        }

        stage('Stop Existing Container') {
            steps {
                echo 'Stopping existing container (if any)...'
                sh '''
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                '''
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Starting container and waiting for data...'
                    sh '''
                        # Run container in background
                        docker run -d --name ${CONTAINER_NAME} ${DOCKER_IMAGE_NAME}
                        
                        # Wait 10 seconds for data to be collected
                        sleep 10
                        
                        # Check if log file exists and has content
                        if [ -f sensor_data.log ] && [ -s sensor_data.log ]; then
                            echo "âœ… Log file created and populated"
                        else
                            echo "Log file missing or empty"
                            docker logs ${CONTAINER_NAME}
                            exit 1
                        fi
                        
                        # Get container logs for debugging
                        docker logs ${CONTAINER_NAME}
                    '''
                }
            }
        }

        stage('Extract Artifacts') {
            steps {
                script {
                    # Copy log file from container
                    sh '''
                        docker cp ${CONTAINER_NAME}:/workspace/sensor_data.log ./sensor_data.log
                        docker cp ${CONTAINER_NAME}:/workspace/python/static/plot.png ./plot.png
                    '''
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'sensor_data.log, plot.png', allowEmptyArchive: true
                stash includes: 'sensor_data.log, plot.png', name: 'output-files'
            }
        }

        stage('Clean Up') {
            steps {
                sh '''
                    echo "Cleaning up..."
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                    docker rmi ${DOCKER_IMAGE_NAME} || true
                '''
            }
        }
    }

    post {
        success {
            echo ' pipeline completed successfully!'
            echo ' Artifacts (sensor_data.log, plot.png) are available in the build'
            mail to: 'mohamed.moustafa2106.com', subject: 'Pipeline Success', body: 'Sensor monitoring system built and tested successfully!'
        }
        failure {
            echo 'pipeline failed!'
            mail to: 'mohamed.moustafa2106.com', subject: 'Pipeline Failed', body: "Build failed: ${env.BUILD_URL}"
        }
    }
}
